{"version":3,"file":"mod.js","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\n// 4294901760 => 0xFFFF0000 => 11111111111111110000000000000000\nvar B4 = 0xFFFF0000 >>> 0; // asm type annotation\n\n// 65280 => 0xFF00 => 00000000000000001111111100000000\nvar B3 = 0xFF00 >>> 0; // asm type annotation\n\n// 240 => 0xF0 => 00000000000000000000000011110000\nvar B2 = 0xF0 >>> 0; // asm type annotation\n\n// 12 => 0xC => 00000000000000000000000000001100\nvar B1 = 0xC >>> 0; // asm type annotation\n\n// 2 => 0x2 => 00000000000000000000000000000010\nvar B0 = 0x2 >>> 0; // asm type annotation\n\n// 16 => 00000000000000000000000000010000\nvar S4 = 16 >>> 0; // asm type annotation\n\n// 8 => 00000000000000000000000000001000\nvar S3 = 8 >>> 0; // asm type annotation\n\n// 4 => 00000000000000000000000000000100\nvar S2 = 4 >>> 0; // asm type annotation\n\n// 2 => 00000000000000000000000000000010\nvar S1 = 2 >>> 0; // asm type annotation\n\n// 1 => 00000000000000000000000000000001\nvar S0 = 1 >>> 0; // asm type annotation\n\n\n// MAIN //\n\n/**\n* Computes an integer binary logarithm (base two).\n*\n* ## Method\n*\n* 1.  Note that the largest unsigned 32-bit integer is `4294967295`, which is `2^{32}-1`. Hence, the integer binary logarithm cannot exceed `31` (i.e., `16 + 8 + 4 + 2 + 1`), which corresponds to the bit sequence\n*\n*     ```binarystring\n*     00000000000000000000000000011111\n*     ```\n*\n* 2.  Initialize a return variable with the value zero.\n*\n* 3.  If at least one of the first sixteen most significant bits of the input 32-bit integer `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` is at least `16` (i.e., `x > 65536`). Hence, activate the corresponding bit of the return variable. Mutate `x` by shifting sixteen bits to the right, discarding the bits shifted off.\n*\n* 4.  Carry out the following steps with `B` in `[ 8, 4, 2, 1 ]`:\n*\n*     -   If at least one of the next `B` most significant bits of the current `x` is turned on, we know that the power to which the number `2` must be raised to obtain `x` has to be increased by `B`.\n*     -   Activate the bit of the return variable that corresponds to `B`.\n*     -   Mutate `x` by shifting `B` bits to the right, discarding the bits shifted off.\n*\n* 5.  The final value of the return variable is the integer binary logarithm of `x`.\n*\n*\n* @param {uinteger32} x - input value\n* @returns {uinteger32} integer binary logarithm\n*\n* @example\n* var v = log2( 4 >>> 0 );\n* // returns 2\n*\n* @example\n* var v = log2( 8 >>> 0 );\n* // returns 3\n*\n* @example\n* var v = log2( 9 >>> 0 );\n* // returns 3\n*/\nfunction log2( x ) {\n\tvar out = 0 >>> 0; // asm type annotation\n\tvar y = x >>> 0; // asm type annotation\n\n\t// `x >= 65536`:\n\tif ( y & B4 ) {\n\t\ty >>>= S4;\n\t\tout |= S4;\n\t}\n\t// `x >= 256`:\n\tif ( y & B3 ) {\n\t\ty >>>= S3;\n\t\tout |= S3;\n\t}\n\t// `x >= 16`:\n\tif ( y & B2 ) {\n\t\ty >>>= S2;\n\t\tout |= S2;\n\t}\n\t// `x >= 4`:\n\tif ( y & B1 ) {\n\t\ty >>>= S1;\n\t\tout |= S1;\n\t}\n\t// `x >= 2`:\n\tif ( y & B0 ) {\n\t\ty >>>= S0;\n\t\tout |= S0;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default log2;\n"],"names":["log2","x","out","y"],"mappings":";;AA8FA,SAASA,EAAMC,GACd,IAAIC,EAAM,EACNC,EAAIF,IAAM,EA2Bd,OApGQ,WA4EHE,IACJA,KA9DO,GA+DPD,GA/DO,IAZA,MA8EHC,IACJA,KAhEO,EAiEPD,GAjEO,GAZA,IAgFHC,IACJA,KAlEO,EAmEPD,GAnEO,GAZA,GAkFHC,IACJA,KApEO,EAqEPD,GArEO,GAZA,EAoFHC,IACJA,KAtEO,EAuEPD,GAvEO,GAyEDA"}